3. (10pt)  For a transaction T, consider the following sequence of operations performed by a DBMS:

Start Transaction
<START, T>
Write(X, vx')
Flush(X);
<UPDATE, T, X, vx, vx'>
Write(Y, vy’)
Flush(Y)
<UPDATE, T, Y, vy, vy'>
Commit;
<COMMIT, T>
Flush(log);
Suppose a system crash may happen between any two operations in the sequence. Please answer the following questions:

(a) Can the DBMS recover from a system crash using Undo-only Recovery? If not, rearrange the operations (Flush(log) operations can be added or removed if necessary) so it can be recovered using Undo-only Recovery.
no, if the system crash between for example Flush(X) and <UPDATE, T, X, vx, vx'>. the system will not undo the changes.  


Start Transaction
<START, T>
Write(X, vx')
Write(Y, vy’)
<UPDATE, T, X, vx, vx'>
<UPDATE, T, Y, vy, vy'>
Commit;
<COMMIT, T>
Flush(log);
Flush(Y)
Flush(X);






(b) Can the DBMS recover from a system crash using Redo-only Recovery? If not, rearrange the operations (Flush(log) operations can be added or removed if necessary) so it can be recovered using Redo-only Recovery.
no, becasue with redo only none of the change can flush to disk until the trnsaction is commited 

Start Transaction
<START, T>
Write(X, vx')
<UPDATE, T, X, vx, vx'>
Write(Y, vy’)
<UPDATE, T, Y, vy, vy'>
Commit;
<COMMIT, T>
Flush(log);
Flush(X);
Flush(Y)


4. (20pt) 

(a) Show an example of a schedule that is serializable but not serial. Explain why it is serializable but not serial.
    r1(x),w1(x),r2(y),w1(y),r2(x),r1(y),w2(x) :  the schedule  is equivelnt to (T1) (T2) and it is Interleaved.  
    and Precedence Graph shows that it follow T1 to T2 sequence
    
(b) Show an example of a schedule that is serializable but not 2PL. Explain why it is serializable but not 2PL.
 - sl1(x), r1(x), xl1(x), w1(x), sl2(y) r2(y), w1(y), ul1(x),r2(x), sl1(y), r1(y), xl2(x), w2(x), ul2(x)
 - the schedule is serializable because i took the answer from previous question and add lock into it.
    the schedule serializable since it equivelnt to (T1) (T2) when i clear share lock and exclusive lock.
    but it is not 2pl because where T1 unlock (ul1(x) )and lock (sl1(y)) again in the next transaction, which vialtes 2pl  stated A transaction cannot request
    additional locks once it releases any locks.
 
(c) Show an example of a schedule that is serializable but not recoverable. Explain why it is serializable but not recoverable.
    -w1(x),r2(x),w2(x),c2,a1
    - w1(x),r2(x),w2(x) is serializable since it is serial. it is not recoverable, 
     T2 is reading from the data written by T1. and when T1 aborted, T2 also have to abort because in recoverable schedule,in order for 
     transaction to commit, the transaction that it read from have to commit. and since T1 is aorted, T2 cannot commit.
     
(d) Show an example of a schedule that is recoverable but not ACR. Explain why it is recoverable but not ACR.

5. (10pt) According to the Multiversion Locking protocol, when a read-only transaction requests a value from a block, it can read from the version of the block that was most recently committed at the time the transaction began. Suppose we extend this to the read operations in read-write transactions. Specifically, for a read-write transaction T,

If a block is updated by T, subsequent read operations in T will read from the version of the block produced by T.
If a block is not updated by T, read operations in T will read from the version of the block that was most recently committed at the time when T began.
Use an example to show that this "modified Multiversion Locking protocol" may produce non-serializable schedules.
